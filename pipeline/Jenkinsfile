pipeline{
    agent{
        node{
            label "maven"
        }
    }
    
    environment{
        APPLICATION_NAME = 'demo-php'
        DEV_PROJECT = "mydemo-php"
        BUILDCFG_NAME = "demo-php"
        GIT = "https://github.com/renatoppuccini/demo-php.git"
    }
    
    stages{
        stage('Delete all app objects'){
            steps {
                script {
                    openshift.withCluster() {
                        openshift.withProject(DEV_PROJECT) {
                            openshift.selector("all", [ app : BUILDCFG_NAME ]).delete()
                        }
                    }
                }
            }
        }

        stage('Create All Application Objects if it does exists') {
            when {
                expression {
                    openshift.withCluster() {
                        openshift.withProject(DEV_PROJECT) {
                            return !openshift.selector("bc", "${BUILDCFG_NAME}").exists();
                        }
                    }
                }
            }
           steps {
                script {
                    openshift.withCluster( "https://api.usa.puccini.redhat-demo.com:6443") {
                        openshift.withProject(DEV_PROJECT) {
                            //openshift.newBuild("--name=${BUILDCFG_NAME}", "--image-stream=openshift/php:latest", GIT).logs("-f")
			        openshift.selector("all", [ app : BUILDCFG_NAME ]).delete()
			        openshift.selector("all", [ is : BUILDCFG_NAME ]).delete()
				openshift.newApp("--name=${BUILDCFG_NAME}", "--image-stream=openshift/php:latest", GIT)
				
                        }
                    }
                }
            }
        }
     
	   // Deploy the built image to the Development Environment.
    stage('Deploy to Dev') {
    	steps {
        	script {
		  openshift.withCluster() {
			  openshift.withProject(DEV_PROJECT) {
				// Deploy the development application.
           			openshift.selector("dc", BUILDCFG_NAME).rollout().latest();
				  // Deploy the development application.
				 // openshift.selector("dc", "demo-php").rollout().latest();

				  // Wait for application to be deployed
				  //def dc = openshift.selector("dc", "demo-php").object()
				  //def dc_version = dc.status.latestVersion
				  //def rc = openshift.selector("rc", "demo-php-${dc_version}").object()

//				  echo "Waiting for ReplicationController demo-php-${dc_version} to be ready"
//				  while (rc.spec.replicas != rc.status.readyReplicas) {
//				    sleep 5
//				    rc = openshift.selector("rc", "demo-php-${dc_version}").object()
  //        			  }
        		  }
     		 }
           }
         }
       }
	    
	
	    
	    
    }

   
    
}
