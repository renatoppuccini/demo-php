pipeline{
    agent{
        node{
            label "maven"
        }
    }
    
    environment{
        APPLICATION_NAME = 'demo-php'
        DEV_PROJECT = "mydemo-php"
        BUILDCFG_NAME = "demo-php"
        GIT = "https://github.com/renatoppuccini/demo-php.git"
    }
    
    stages{
        stage('Delete buildconfig'){
            steps {
                script {
                    openshift.withCluster() {
                        openshift.withProject(DEV_PROJECT) {
                            openshift.selector("all", [ template : BUILDCFG_NAME ]).delete()
                        }
                    }
                }
            }
        }

        stage('Create Image Builder') {
            when {
                expression {
                    openshift.withCluster() {
                        openshift.withProject(DEV_PROJECT) {
                            return !openshift.selector("bc", "${BUILDCFG_NAME}").exists();
                        }
                    }
                }
            }
           steps {
                script {
                    openshift.withCluster( "https://api.usa.puccini.redhat-demo.com:6443") {
                        openshift.withProject(DEV_PROJECT) {
                            openshift.newBuild("--name=${BUILDCFG_NAME}", "--image-stream=openshift/php:latest", GIT).logs("-f")
                        }
                    }
                }
            }
        }
        stage('Start Image') {
			steps {
				script {
					openshift.withCluster() {
						openshift.withProject() {
							openshift.startBuild(BUILDCFG_NAME).logs("-f")
						}
					}
				}
			}
	}
	 // Deploy the built image to the Development Environment.
    stage('Deploy to Dev') {
    	steps {
        	script {
		  openshift.withCluster() {
			  openshift.withProject(DEV_PROJECT) {
				  // OpenShift 4
				  openshift.set("image", "dc/demo-php", "demo-php=image-registry.openshift-image-registry.svc:5000/mydemo-php/demo-php")

				  // Update the Config Map which contains the users for the Tasks application
				  // (just in case the properties files changed in the latest commit)
				  //openshift.selector('configmap', 'tasks-config').delete()
				  //def configmap = openshift.create('configmap', 'tasks-config', '--from-file=./configuration/application-users.properties', '--from-file=./configuration/application-roles.properties' )

				  // Deploy the development application.
				  openshift.selector("dc", "demo-php").rollout().latest();

				  // Wait for application to be deployed
				  def dc = openshift.selector("dc", "demo-php").object()
				  def dc_version = dc.status.latestVersion
				  def rc = openshift.selector("rc", "demo-php-${dc_version}").object()

				  echo "Waiting for ReplicationController demo-php-${dc_version} to be ready"
				  while (rc.spec.replicas != rc.status.readyReplicas) {
				    sleep 5
				    rc = openshift.selector("rc", "demo-php-${dc_version}").object()
          			  }
        		  }
     		 }
           }
         }
       }
	    
	
	    
	    
    }

   
    
}
